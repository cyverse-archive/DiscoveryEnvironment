project(':de') {
    apply plugin: 'war'
    apply plugin: 'gwt'
    apply plugin: 'jetty'

    configurations {
        applet
    }

    dependencies {
        applet "org.irods.idrop:idrop-lite:2.0.1-SNAPSHOT@jar"

        gwt "com.sencha.gxt:gxt:$gxtVersion"
        gwt "com.google.gwt.inject:gin:$gwtGinVer"
        gwt "com.google.guava:guava-gwt:$guavaGwtVer"

        gwt project(':de-desktop')
        gwt project(':themes')

        compile "com.sencha.gxt:gxt:$gxtVersion"
        compile "com.google.gwt.inject:gin:$gwtGinVer"
        compile "com.google.guava:guava-gwt:$guavaGwtVer"

        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "ch.qos.logback:logback-core:$logbackVersion"
        compile "ch.qos.logback:logback-classic:$logbackVersion"

        compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        compile "org.slf4j:log4j-over-slf4j:$slf4jVersion"

        compile project(':de-desktop')
        compile project(':themes')

        testCompile "com.google.gwt.gwtmockito:gwtmockito:$gwtMockitoVer"
        testCompile project(':de-common-module').sourceSets.test.output
    }

    gwt {
        gwtVersion = "$gwtVer"
        modules 'org.iplantc.de.discoveryenvironment'
        devModules 'org.iplantc.de.discoveryenvironmentDev'

        src += files(project(':ui-commons-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-commons-module').sourceSets.main.output.resourcesDir)
        src += files(project(':ui-applications-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-applications-module').sourceSets.main.output.resourcesDir)
        src += files(project(':ui-resources-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-resources-module').sourceSets.main.output.resourcesDir) + files(project(':ui-resources-module').sourceSets.main.resources.srcDirs)
        src += files(project(':confluence-client').sourceSets.main.allJava.srcDirs) + files(project(':confluence-client').sourceSets.main.output.resourcesDir)
        src += files(project(':ui-disk-resource-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-disk-resource-module').sourceSets.main.output.resourcesDir)
        src += files(project(':ui-apps-widgets-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-apps-widgets-module').sourceSets.main.output.resourcesDir)
        src += files(project(':ui-pipelines-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-pipelines-module').sourceSets.main.output.resourcesDir)
        src += files(project(':ui-pipeline-builder-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-pipeline-builder-module').sourceSets.main.output.resourcesDir)
        src += files(project(':ui-apps-integration').sourceSets.main.allJava.srcDirs) + files(project(':ui-apps-integration').sourceSets.main.output.resourcesDir)
        src += files(project(':analyses-module').sourceSets.main.allJava.srcDirs) + files(project(':analyses-module').sourceSets.main.output.resourcesDir)
        src += files(project(':file-viewers').sourceSets.main.allJava.srcDirs) + files(project(':file-viewers').sourceSets.main.output.resourcesDir)
        src += files(project(':de-common-module').sourceSets.main.allJava.srcDirs) + files(project(':de-common-module').sourceSets.main.output.resourcesDir)
        src += files(project(':notifications').sourceSets.main.allJava.srcDirs) + files(project(':notifications').sourceSets.main.output.resourcesDir)
        src += files(project(':de-desktop').sourceSets.main.allJava.srcDirs) + files(project(':de-desktop').sourceSets.main.output.resourcesDir)
        src += files(project(':themes').sourceSets.main.allJava.srcDirs) + files(project(':themes').sourceSets.main.output.resourcesDir)
        src += files(project(':newToolRequests').sourceSets.main.allJava.srcDirs) + files(project(':newToolRequests').sourceSets.main.output.resourcesDir)
        src += files(project(':collaborators').sourceSets.main.allJava.srcDirs) + files(project(':collaborators').sourceSets.main.output.resourcesDir)

        superDev { noPrecompile = true }
        maxHeapSize = '1024M'
        compiler {
            enableClosureCompiler = true;
            disableClassMetadata = true;
            disableCastChecking = true;
        }

    }

    war {
        // Put idrop lite jar into war
        from(configurations.applet) {
            into 'applets'
        }
    }

    draftWar {
        // Put idrop lite jar into war
        from(configurations.applet) {
            into 'applets'
        }
    }

}

project(':belphegor') {
    apply plugin: 'war'
    apply plugin: 'gwt'
    apply plugin: 'jetty'

    dependencies {
        gwt "com.sencha.gxt:gxt:$gxtVersion"
        gwt "com.google.gwt.inject:gin:$gwtGinVer"
        gwt "com.google.guava:guava-gwt:$guavaGwtVer"

        gwt project(':belphegor-desktop')
        gwt project(':themes')

        compile "com.sencha.gxt:gxt:$gxtVersion"
        compile "com.google.gwt.inject:gin:$gwtGinVer"
        compile "com.google.guava:guava-gwt:$guavaGwtVer"

        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "ch.qos.logback:logback-core:$logbackVersion"
        compile "ch.qos.logback:logback-classic:$logbackVersion"

        compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        compile "org.slf4j:log4j-over-slf4j:$slf4jVersion"

        compile project(':belphegor-desktop')
        compile project(':themes')

        testCompile "com.google.gwt.gwtmockito:gwtmockito:$gwtMockitoVer"
        testCompile project(':de-common-module').sourceSets.test.output
    }

    gwt {
        gwtVersion = "$gwtVer"
        modules 'org.iplantc.admin.belphegor.belphegor'
        devModules 'org.iplantc.admin.belphegor.belphegorDev'

        src += files(project(':ui-commons-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-commons-module').sourceSets.main.output.resourcesDir)
        src += files(project(':ui-applications-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-applications-module').sourceSets.main.output.resourcesDir)
        src += files(project(':ui-resources-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-resources-module').sourceSets.main.output.resourcesDir) + files(project(':ui-resources-module').sourceSets.main.resources.srcDirs)
        src += files(project(':ui-disk-resource-module').sourceSets.main.allJava.srcDirs) + files(project(':ui-disk-resource-module').sourceSets.main.output.resourcesDir)
        src += files(project(':de-common-module').sourceSets.main.allJava.srcDirs) + files(project(':de-common-module').sourceSets.main.output.resourcesDir)
        src += files(project(':confluence-client').sourceSets.main.allJava.srcDirs) + files(project(':confluence-client').sourceSets.main.output.resourcesDir)
        src += files(project(':belphegor-desktop').sourceSets.main.allJava.srcDirs) + files(project(':belphegor-desktop').sourceSets.main.output.resourcesDir)
        src += files(project(':themes').sourceSets.main.allJava.srcDirs) + files(project(':themes').sourceSets.main.output.resourcesDir)
        src += files(project(':newToolRequests').sourceSets.main.allJava.srcDirs) + files(project(':newToolRequests').sourceSets.main.output.resourcesDir)
        src += files(project(':collaborators').sourceSets.main.allJava.srcDirs) + files(project(':collaborators').sourceSets.main.output.resourcesDir)

        superDev { noPrecompile = true }
        maxHeapSize = '1024M'
        compiler {
            enableClosureCompiler = true;
            disableClassMetadata = true;
            disableCastChecking = true;
        }


    }
}

configure(subprojects.findAll { it.name == "de" || it.name == "belphegor" }) {

    task runDraftJetty(type: JettyRunWar) {
        group 'Web application'
        description 'Runs Jetty with an exploded draft war'
        //httpPort = 8888
        dependsOn draftWar
        dependsOn.remove('war')
        webApp = draftWar.archivePath
    }

    // Create convenience task for launching sdm
    task sdm(dependsOn: 'gwtSuperDev') {
        description 'Short hand task for launching GWT Super Dev Mode'
    }

    war {
        manifest {
            attributes "Jenkins-Build-Version": "${BUILD_TAG}",
                    "Jenkins-Build-ID": "${BUILD_ID}",
                    "Jenkins-Build-Number": "${BUILD_NUMBER}",
                    "Git-Branch": "${GIT_BRANCH}",
                    "Git-Commit": "${GIT_COMMIT}"
        }
    }

    draftWar {
        manifest {
            attributes "Jenkins-Build-Version": "${BUILD_TAG}",
                    "Jenkins-Build-ID": "${BUILD_ID}",
                    "Jenkins-Build-Number": "${BUILD_NUMBER}",
                    "Git-Branch": "${GIT_BRANCH}",
                    "Git-Commit": "${GIT_COMMIT}"
        }
    }

    task createProdWar(type: Copy) {
        dependsOn war
        into 'build/libs/wars'
        from('build/libs') {
            exclude '**/*draft*.war'
        }
        rename project.tasks.war.archiveName, project.name + '.war'
    }

    clean {
        delete "./war"
        delete "./bin"
    }
}


